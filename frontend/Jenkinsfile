pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: node
    image: node:14-alpine
    command:
    - sleep
    args:
    - infinity
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command:
    - sleep
    args:
    - 9999999
    volumeMounts:
    - name: docker-config
      mountPath: /kaniko/.docker
    resources:
      requests:
        cpu: "800m"
        memory: "2000Mi"
      limits:
        cpu: "1000m"
        memory: "4000Mi"
  - name: trivy 
    image: aquasec/trivy:latest 
    command: 
    - sleep
    args:
    - 9999999
    resources:
        requests:
        cpu: "400m"
        memory: "800Mi"
    limits:
        cpu: "800m"
        memory: "1200Mi"
  volumes:
  - name: docker-config
    projected:
      sources:
      - secret:
          name: docker-credentials
          items:
          - key: .dockerconfigjson
            path: config.json
'''
        }
    }
    environment {
        CI = 'true'
        IMAGE_TAG = "${BUILD_NUMBER}" // Use build number as image tag
        PIPELINE_NAME = "${env.JOB_NAME}" // send email with pipeline name
    }
    stages {
        stage('Checkout') {
            steps {
                container('node') {
                    checkout scmGit(
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/Thanh8804/hospital-booking-project.git',
                            credentialsId: 'github-token'
                        ]]
                    )
                }
            }
        }
        stage('Check npm and install git') {
            when {
                changeset "**/frontend/**"
            }
            steps {
                container('node') {
                    sh 'npm version'
                    sh 'apk add --no-cache git'
                }
            }
            
        }
        // this stage is used to install JDK 17 for sonar scan and build the project
        stage('Install jdk') {
            when {
                changeset "**/frontend/**"
            }
            steps {
                container('node') {
                    sh '''
                        apk add --no-cache openjdk17
                        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk
                        export PATH=$JAVA_HOME/bin:$PATH
                        java -version
                    '''
                }
            }
        }

        stage('Build and Test') {
            when {
                changeset "**/frontend/**"
            }
            parallel {
                stage('Build') {
                    steps {
                        container('node') {
                            dir('frontend') {
                                sh 'npm ci'
                            }
                        }
                    }
                }
                stage('Test') {
                    steps {
                        container('node') {
                            dir('frontend') {
                                sh 'npm test -- --coverage || true' 
                            }
                        }
                    }
                }
            }
        }
        stage('Code Analysis') {
            when {
                changeset "**/frontend/**"
            }
            parallel {
                stage('SonarQube Scan') {
                    environment {
                        SONAR_AUTH_TOKEN = credentials('sonarqube-token');
                        SCANNER_HOME = tool 'sonarqube';   
                    }
                    steps {
                        container('node') {
                            dir('frontend'){
                                withSonarQubeEnv(installationName: 'sonarqube') {
                                    sh '''
                                        $SCANNER_HOME/bin/sonar-scanner \
                                        -Dsonar.projectKey=hospital-booking-frontend \
                                        -Dsonar.host.url=http://35.233.235.112:31000/ \
                                        -Dsonar.login=$SONAR_AUTH_TOKEN
                                    '''
                                }
                            }
                        }
                    }
                }
                stage('Trivy Source Scan') {
                    steps {
                        container('trivy') {
                            dir('frontend') {
                                sh '''
                                    trivy fs --no-progress --severity MEDIUM,HIGH,CRITICAL \
                                    --scanners vuln,secret \
                                    --format table . > trivy-source.txt 2>&1
                                    cat trivy-source.txt
                                '''
                                sh '''
                                    CRITICAL_COUNT=$(grep -oP 'CRITICAL: \\K[0-9]+' trivy-source.txt | head -1)
                                    if [ "$CRITICAL_COUNT" != "" ] && [ "$CRITICAL_COUNT" -gt 0 ]; then
                                        echo "❌ Critical vulnerabilities found in source scan ($CRITICAL_COUNT), failing pipeline"
                                        exit 1
                                    else
                                        echo "✅ No critical vulnerabilities found."
                                    fi
                                '''
                            }
                        }
                    }
                }
            }
        }
        stage('Quality Gate') {
            when {
                changeset "**/frontend/**"
            }
            steps {
                container('node') {
                    dir('frontend'){
                        timeout(activity: true, time: 2, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: true, credentialsId: 'sonarqube-token'
                        }
                    }
                }
            }
        }
        stage('Build and Push Docker Image') {
            when {
                changeset "**/frontend/**"
            }
            steps {
                container(name: 'kaniko', shell: '/busybox/sh') {
                    dir('frontend'){
                        sh '''#!/busybox/sh
                            /kaniko/executor \
                              --context `pwd` \
                              --destination thanh8804/hospital-booking-frontend-image:$IMAGE_TAG \
                              --cache=true
                        '''
                    }
                }
            }
        }
        stage('Trivy'){
            when {
                changeset "**/frontend/**"
            }
            steps {
              container('trivy'){
                  dir('frontend'){
                        sh '''
                        trivy image --no-progress --severity MEDIUM,HIGH,CRITICAL \
                                    --skip-files ".npm/_cacache/*" \
                                    --timeout 10m thanh8804/hospital-booking-frontend-image:$IMAGE_TAG > trivy-image.txt 2>&1
                        cat trivy-image.txt
                        '''
                        sh '''
                        CRITICAL_COUNT=$(grep -oP 'CRITICAL: \\K[0-9]+' trivy-image.txt | head -1)
                        if [ "$CRITICAL_COUNT" != "" ] && [ "$CRITICAL_COUNT" -gt 0 ]; then
                            echo "❌ Critical vulnerabilities found in source scan ($CRITICAL_COUNT), failing pipeline"
                            exit 1
                        else
                            echo "✅ No critical vulnerabilities found."
                        fi
                        '''
                    }
                }
             }
        }
        stage('Update Dev Manifests') {
            when {
                changeset "**/frontend/**"
            }
            steps {
                container('node') {
                    withCredentials([string(credentialsId: 'githubtoken', variable: 'GIT_TOKEN')]) {
                        retry(3){
                            sh '''
                                git clone https://github.com/Thanh8804/hospital-booking-manifests.git
                                cd hospital-booking-manifests/k8s-manifests/frontend
                                sed -i "s/newTag:.*/newTag: \\"${BUILD_NUMBER}\\"/g" overlays/dev/kustomization.yaml
                                git config user.email "chithanh080804@gmail.com"
                                git config user.name "Thanh8804@"
                                git add overlays/dev/kustomization.yaml
                                git commit -m "Update dev image to thanh8804/hospital-booking-frontend-image:${BUILD_NUMBER}" || echo "No changes to commit"
                                git push https://$GIT_TOKEN@github.com/Thanh8804/hospital-booking-manifests.git HEAD:main
                            '''
                        }
                    }
                }
            }
        }
        stage('Trigger ArgoCD Sync DEV') {
            when {
                changeset "**/frontend/**"
            }
            steps {
                container('node') {
                    withCredentials([string(credentialsId: 'argocd-token', variable: 'ARGOCD_TOKEN')]) {
                        sh '''
                            apk add --no-cache curl
                            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                            install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
                            rm argocd-linux-amd64
                            argocd login argocd-server.argocd.svc.cluster.local:443 --username admin --password $ARGOCD_TOKEN --insecure
                            argocd app sync hospital-booking-frontend-development
                         '''
                     }
                 }
             }
        }
        stage('Update Prod Manifest') {
            when {
                changeset "**/frontend/**"
            }
            steps {
                container('node') {
                    withCredentials([string(credentialsId: 'githubtoken', variable: 'GIT_TOKEN')]) {
                        retry(3){
                            sh '''
                                cd hospital-booking-manifests/k8s-manifests/frontend
                                sed -i "s/newTag:.*/newTag: \\"${BUILD_NUMBER}\\"/g" overlays/prod/kustomization.yaml
                                git config user.email "chithanh080804@gmail.com"
                                git config user.name "Thanh8804@"
                                git add overlays/prod/kustomization.yaml
                                git commit -m "Update prod image to thanh8804/hospital-booking-frontend-image:${BUILD_NUMBER}" || echo "No changes to commit"
                                git push https://$GIT_TOKEN@github.com/Thanh8804/hospital-booking-manifests.git HEAD:main
                            '''
                        }
                    }
                }
            }
        }
        stage('Trigger ArgoCD Sync PROD') {
            when{
                changeset "**/frontend/**"
            }
            steps {
                container('node') {
                    withCredentials([string(credentialsId: 'argocd-token', variable: 'ARGOCD_TOKEN')]) {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            retry(3) {
                                sh '''
                                    argocd app sync hospital-booking-frontend-production --timeout 300 > argocd-sync-prod.log 2>&1
                                    cat argocd-sync-prod.log
                                '''
                            }
                        }
                     }
                 }
             }
        }
    }
    post {
        always {
            echo "Pipeline '${PIPELINE_NAME}' completed."
        }
        success {
            emailext attachLog: true, 
                     body: "The pipeline '${PIPELINE_NAME} Build #${BUILD_NUMBER}' has completed successfully.", 
                     subject: "Pipeline Success: ${PIPELINE_NAME} - Build #${BUILD_NUMBER}", 
                     to: 'chithanh080804@gmail.com'
        }
        failure {
            emailext attachLog: true, 
                     body: "The pipeline '${PIPELINE_NAME}' has failed. Please review the attached logs.", 
                     subject: "Pipeline Failed: ${PIPELINE_NAME} - Build #${BUILD_NUMBER}", 
                     to: 'chithanh080804@gmail.com'
        }
    }
}